@page "/counter"
@inject IJSRuntime jsRuntime;
@using System.Text
@using TaskListWebApi.Models
@using TaskListFrontEnd.Components
@using TaskListWebApi.Helpers

<PageTitle>Counter</PageTitle>

<div class="container card">
  <div class="row up-div" style="height:fit-content" >
    <div style="display:flex; width:50%">
        <button class="plus-button">
            <span class="plus-container">
                <img class="plus-image" src=/Resources/Images/plus-square.svg />
            </span>
        </button>
        <div style="width:90%">
            <EditForm Model="taskList">
                <DataAnnotationsValidator />
                    <div class="form-group">
                        <InputText @oninput="@CambiarColorPalabras" id="inputTexto" maxlength=100 placeholder="Type to add new task" class="input-task" @bind-Value="@InputValue" />
                    </div>
                    @if(stringBefore.Count()>0)
                    {
                        <div class="container">
                            <div class="row">
                                <div class="" style="width:40px">
                                    <div class="form-check">
                                      <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                                      
                                    </div>
                                </div>
                                <div class="col" style="justify-content:left">
                                    <div class="row" style="width:200px">
                                        @foreach (var item in stringBefore)
                                        {
                                            switch (@GetHelper.FinalCheck(item))
                                            {
                                                case "HasHashtag":
                                                    <label id="HasHashtag" class="HasHashtag">
                                                         <span class="image-container-HasHashtag">
                                                            <img class="image-HasHashtag"/>
                                                         </span> 
                                                         <span>
                                                            important
                                                         </span>
                                                    </label>
                                                    continue;
                                                case "HasAt":
                                                    <label id="HasAt" class="HasAt">
                                                        <span class="image-container-HasAt">
                                                            <img class="image-HasAt"/>
                                                        </span> 
                                                        <span>
                                                            @GetHelper.SplitChar(item)
                                                        </span>
                                                    </label>
                                                    continue;
                                                case "IsValidEmail":
                                                    <label id="IsValidEmail" class="IsValidEmail">
                                                        <span class="image-container-Email">
                                                            <img class="image-Email"/>
                                                        </span> 
                                                        <span>
                                                            Mail    
                                                        </span>
                                                    </label>
                                                    continue;
                                                case "IsValidUrl":
                                                    <label id="IsValidUrl" class="IsValidUrl">
                                                        <span class="image-container-Link">
                                                            <img class="image-Link"/>
                                                        </span> 
                                                        <span>
                                                            Link    
                                                        </span>
                                                    </label>
                                                    continue;
                                                case "JustText":
                                                    <label id="JustText" class="JustText">@item</label>
                                                    continue;
                                            }
                                        }   
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
            </EditForm>

        </div>
    </div>
    <div class="col-sm-4" style="display: flex;justify-content:end;width:50%">
        <div style="">
            <Avatar Disabled=true/>
        </div>  
    </div>
  </div>

  <div class="row down-div" >
     <div style="display:flex; background-color; width:70%">
        <div>
            <OpenButton Disabled=true ImageUrl="/Resources/Images/feather-icon.png" ButtonText="Open"/>
        </div>
        <div style="">
            <DateButton Disabled=true ImageUrl="/Resources/Images/calendar.svg" ButtonText="Date"/>
        </div>
        <div style="">
            <DateButton Disabled=true ImageUrl="/Resources/Images/unlock.svg" ButtonText="Public"/>
        </div>
        <div style="">
            <LargerButton Disabled=true ImageUrl="/Resources/Images/sun.svg" ButtonText="Highlight"/>
        </div>
        <div style="">
            <LargerButton Disabled=true ImageUrl="/Resources/Images/alert-circle.svg" ButtonText="Estimation"/>
        </div>
     </div>
    <div style="display: flex; justify-content:end; background-color:green; width:30%">
        <div style="">
            <button onclick="@CancelValue" class="cancel-button">
                <span>Cancel</span>
            </button>
        </div>
       <div style="">
            <button onclick="@ValidateValue" class="ok-button">
                <span>OK</span>
            </button>
       </div>
    </div>
  </div>
</div>




<div class="container-fluid down-div">
  <div class="row">
    <div class="col-sm-6">
      <div class="d-flex justify-content-start">
        <OpenButton Disabled=true ImageUrl="/Resources/Images/feather-icon.png" ButtonText="Open"/>
        <DateButton Disabled=true ImageUrl="/Resources/Images/calendar.svg" ButtonText="Date"/>
        <DateButton Disabled=true ImageUrl="/Resources/Images/unlock.svg" ButtonText="Public"/>
        <LargerButton Disabled=true ImageUrl="/Resources/Images/sun.svg" ButtonText="Highlight"/>
        <LargerButton Disabled=true ImageUrl="/Resources/Images/alert-circle.svg" ButtonText="Estimation"/>
      </div>
    </div>
    <div class="col-sm-6">
      <div class="d-flex justify-content-end">
        <button onclick="@CancelValue" class="cancel-button">
                <span>Cancel</span>
        </button>
        <button onclick="@ValidateValue" class="ok-button">
                <span>OK</span>
        </button>
      </div>
    </div>
  </div>
</div>


@code 
{
    private int currentCount = 0;

    [Parameter] public string LabelText { get; set; }
    [Parameter] public string InputId { get; set; }
    [Parameter] public string InputValue { get; set; }
    [Parameter] public string ButtonText { get; set; }
    [Parameter] public string LabelID { get; set; }
    [Parameter] public Helper GetHelper { get; set; }
    public List<string> stringBefore = new List<string>();
    public TaskList taskList = new TaskList();
    string stringValidated;


    private void IncrementCount()
    {
        Helper helper = new Helper();
        stringBefore = helper.SplitString(InputValue);
    }

    private void ValidateValue()
    {
        //Helper helper = new Helper();
        GetHelper = new Helper();
        List<string> stringBefore1 = GetHelper.SplitString(InputValue);
        stringBefore = stringBefore1;
    }
    private void CancelValue()
    {
        stringBefore.Clear();
        InputValue = "";

    }

    private void ShowOptions()
    {
        //jsRuntime.InvokeAsync<object>("alert","HOla");
    }

    private string _texto;

    private void CambiarColorPalabras(ChangeEventArgs e)
    {
        _texto = (string)e.Value;
        GetHelper = new Helper();
        string[] palabras = _texto.Split(' ');
        System.Text.StringBuilder resultado = new StringBuilder();
        //for (int i = 0; i < palabras.Length; i++)
        //{
        //    string color = string.Format("rgb({0}, 100, 100)", i * 20); // genera un color diferente para cada palabra
        //    resultado.AppendFormat("<span style=\"color:{0}\">{1}</span> ", color, palabras[i]);
        //}

        foreach (var item in palabras)
        {
            if(GetHelper.HasAt(item))
            {
                resultado.AppendFormat("<span style=\"background-color:{0}\">{1}</span> ",string.Format("rgb(70, 10, 100)",100),item);

            } else if(GetHelper.HasHashtag(item))
            {
                resultado.AppendFormat("<span style=\"color:{0}\">{1}</span> ",string.Format("rgb(100, 80, 100)",1),item);
                
            }else if(GetHelper.IsValidEmail(item))
            {
                resultado.AppendFormat("<span style=\"color:{0}\">{1}</span> ",string.Format("rgb(100, 100, 25)"),item);
                
            }else if(GetHelper.IsValidUrl(item))
            {
                resultado.AppendFormat("<span style=\"color:{0}\">{1}</span> ",string.Format("rgb(10, 100, 100)"),item);
            }
        }


        resultado.Append("<br>"); // Agrega un salto de línea para separar los resultados
        string resultadoFinal = resultado.ToString();
        StateHasChanged(); // Notifica a Blazor que el estado del componente ha cambiado
    }
}